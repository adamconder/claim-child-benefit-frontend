
@import views.xml.xml.sections._

@this(
    line: Line,
    eldestChildSection: EldestChildSection
)

@(model: JourneyModel)(implicit messages: Messages)

<fo:block-container margin-bottom="1cm" wrap-option="wrap" page-break-after="always">

    <fo:block font-size="18pt" font-weight="bold" margin-bottom="0.5cm">@messages("pdf.personalDetails")</fo:block>

    @line("pdf.nino", model.applicant.nationalInsuranceNumber.getOrElse(messages("pdf.notKnown")))

    @line("pdf.name.last", model.applicant.name.lastName)

    @line("pdf.name.first", model.applicant.name.firstName)

    @model.applicant.name.middleNames.map { middleNames =>
        @line("pdf.name.middle", middleNames)
    }

    <fo:block margin-bottom="3mm">
        <fo:block font-weight="bold">@messages("pdf.currentAddress")</fo:block>
        @model.applicant.currentAddress.lines.map { line =>
            <fo:block width="8cm" wrap-option="wrap">@(line)</fo:block>
        }
    </fo:block>

    @line("pdf.nationality", model.applicant.nationality)

    @line("pdf.alwaysLivedInUk", booleanToYesNo(model.applicant.alwaysLivedInUk))

    @line("pdf.hmfOrCivilServant", booleanToYesNo(model.applicant.memberOfHMForcesOrCivilServantAbroad.getOrElse(false)))

    @if(model.applicant.previousFamilyNames.nonEmpty) {
        <fo:block margin-bottom="3mm">
            <fo:block font-weight="bold">@messages("pdf.previousNames")</fo:block>
            @model.applicant.previousFamilyNames.map { name =>
                <fo:block width="8cm" wrap-option="wrap">@(name)</fo:block>
            }
        </fo:block>
    }

    @line("pdf.dateOfBirth", date(model.applicant.dateOfBirth))

    @line("pdf.relationshipStatus", messages(s"pdf.relationshipStatus.${model.relationship.status.toString}"))

    @model.relationship.since.map { since =>
        @line(s"pdf.relationshipStatusDate.${model.relationship.status.toString}", date(since))
    }

    <fo:block margin-bottom="3mm">
        <fo:block font-weight="bold">@messages("pdf.benefits")</fo:block>
        @model.benefits.map { x =>
            <fo:block width="8cm" wrap-option="wrap">@messages(s"benefits.${x.toString}")</fo:block>
        }
    </fo:block>

    @model.applicant.previousAddress.map { address =>
        @line("pdf.livedAtAddressOneYear", messages("site.no"))
        <fo:block margin-bottom="3mm">
            <fo:block font-weight="bold">@messages("pdf.previousAddress")</fo:block>
            @address.lines.map { x =>
                <fo:block width="8cm" wrap-option="wrap">@(x)</fo:block>
            }
        </fo:block>
    }.getOrElse {
        @if(model.applicant.nationalInsuranceNumber.isEmpty) {
            @line("pdf.livedAtAddressOneYear", messages("site.yes"))
        }
    }

    @line("pdf.phoneNumber", model.applicant.telephoneNumber)

    @line("pdf.currentlyReceiving", messages(s"pdf.currentlyReceiving.${model.applicant.currentlyReceivingChildBenefit.toString}"))

    @{model.paymentPreference match {
        case JourneyModel.PaymentPreference.DoNotPay(maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.Weekly(_, maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.EveryFourWeeks(_, maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.ExistingAccount(eldestChild, _) =>
            eldestChildSection(eldestChild)
    }}
</fo:block-container>
