
@import views.xml.xml.sections._

@this(
    line: Line,
    eldestChildSection: EldestChildSection
)

@(model: JourneyModel)(implicit messages: Messages)

<fo:block-container margin-bottom="1cm" keep-together.within-column="always" wrap-option="wrap">

    <fo:block font-size="16pt" font-weight="bold" margin-bottom="0.5cm">@messages("pdf.personalDetails")</fo:block>

    @line("pdf.nino", model.applicant.nationalInsuranceNumber.getOrElse(messages("pdf.notKnown")))

    @line("pdf.name.last", model.applicant.name.lastName)

    @line("pdf.name.first", model.applicant.name.firstName)

    @model.applicant.name.middleNames.map { middleNames =>
        @line("pdf.name.middle", middleNames)
    }

    @line("pdf.currentAddress", model.applicant.currentAddress.lines.mkString(", "))

    @line("pdf.nationality", model.applicant.nationality)

    @line("pdf.alwaysLivedInUk", messages("site.yes"))

    @line("pdf.hmfOrCivilServant", booleanToYesNo(model.applicant.memberOfHMForcesOrCivilServantAbroad))

    @if(model.applicant.previousFamilyNames.nonEmpty) {
        @line("pdf.previousNames", model.applicant.previousFamilyNames.mkString(", "))
    }

    @line("pdf.dateOfBirth", date(model.applicant.dateOfBirth))

    @line("pdf.relationshipStatus", messages(s"pdf.relationshipStatus.${model.relationship.status.toString}"))

    @model.relationship.since.map { since =>
        @line(s"pdf.relationshipStatusDate.${model.relationship.status.toString}", date(since))
    }

    @line("pdf.employmentStatus", model.applicant.employmentStatus.map(x => messages(s"employmentStatus.${x.toString}")).mkString(", "))

    @line("pdf.benefits", model.benefits.map(x => messages(s"benefits.${x.toString}")).mkString(", "))

    @model.applicant.previousAddress.map { address =>
        @line("pdf.livedAtAddressOneYear", messages("site.no"))
        @line("pdf.previousAddress", address.lines.mkString(", "))
    }.getOrElse(line("pdf.livedAtAddressOneYear", messages("site.yes")))

    @line("pdf.phoneNumber", model.applicant.telephoneNumber)

    @line("pdf.bestTimeToContact", model.applicant.bestTimeToContact.map(x => messages(s"bestTimeToContact.${x.toString}")).mkString(", "))

    @line("pdf.currentlyReceiving", messages(s"pdf.currentlyReceiving.${model.applicant.currentlyReceivingChildBenefit.toString}"))

    @{model.paymentPreference match {
        case JourneyModel.PaymentPreference.DoNotPay(maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.Weekly(_, maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.EveryFourWeeks(_, maybeEldestChild) =>
            maybeEldestChild.map(x => eldestChildSection(x))

        case JourneyModel.PaymentPreference.ExistingAccount(eldestChild) =>
            eldestChildSection(eldestChild)

        case JourneyModel.PaymentPreference.ExistingFrequency(_, eldestChild) =>
            eldestChildSection(eldestChild)
    }}
</fo:block-container>
